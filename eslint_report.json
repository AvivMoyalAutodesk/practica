[{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/data-access/config/config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  username: \"myuser\",\n  password: \"myuserpassword\",\n  database: \"shop\",\n  host: \"localhost\",\n  port: 54310,\n  logging: false,\n  dialect: \"postgres\",\n  pool: {\n    max: 10,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/data-access/migrations/20191229152126-entire-schema.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'Sequelize' is defined but never used.","line":47,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  up: async (queryInterface, Sequelize) => {\n    await queryInterface.createTable(\"Orders\", {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER,\n      },\n      externalIdentifier: {\n        type: Sequelize.STRING,\n        unique: true,\n        allowNull: true,\n      },\n      mode: {\n        type: Sequelize.STRING,\n      },\n      userId: {\n        type: Sequelize.INTEGER,\n      },\n      productId: {\n        type: Sequelize.INTEGER,\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE,\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE,\n      },\n    });\n\n    await queryInterface.createTable(\"Countries\", {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER,\n      },\n      name: {\n        type: Sequelize.STRING,\n      },\n    });\n  },\n\n  down: (queryInterface, Sequelize) => queryInterface.dropTable(\"Orders\"),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/data-access/seeders/20191229151823-countries.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'Sequelize' is defined but never used.","line":2,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'name'.","line":9,"column":11,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":9,"endColumn":15},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'name'.","line":10,"column":11,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'queryInterface' is defined but never used.","line":31,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'Sequelize' is defined but never used.","line":31,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  up: async (queryInterface, Sequelize) => {\n    // ✅ Best Practice: Seed only metadata and not test record, read \"Dealing with data\" section for further information\n    await queryInterface.bulkInsert(\n      \"Countries\",\n      [\n        {\n          name: \"Italy\",\n          name: \"USA\",\n          name: \"India\",\n        },\n      ],\n      {}\n    );\n\n    // ❌ Anti-Pattern: Seed test records, read \"Dealing with data\" section for further information\n    const now = new Date();\n    await queryInterface.bulkInsert(\n      \"Orders\",\n      [\n        {\n          userId: 1,\n          productId: 5,\n          createdAt: now,\n          updatedAt: now,\n        },\n      ],\n      {}\n    );\n  },\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkDelete('People', null, {});\n    */\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/jest.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\n * For a detailed explanation regarding each configuration property and type check, visit:\n * https://jestjs.io/docs/configuration\n */\n\nmodule.exports = {\n  // All imported modules in your tests should be mocked automatically\n  // automock: false,\n\n  // Stop running tests after `n` failures\n  // bail: 0,\n\n  // The directory where Jest should store its cached dependency information\n  // cacheDirectory: \"/private/var/folders/fg/vsxql2fd4rgd8fppxfsgyjb40000gn/T/jest_dx\",\n\n  // Automatically clear mock calls, instances and results before every test\n  // clearMocks: false,\n\n  // Indicates whether the coverage information should be collected while executing the test\n  collectCoverage: false,\n\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\n  // collectCoverageFrom: undefined,\n\n  // The directory where Jest should output its coverage files\n  coverageDirectory: \"coverage\",\n\n  // An array of regexp pattern strings used to skip coverage collection\n  // coveragePathIgnorePatterns: [\n  //   \"/node_modules/\"\n  // ],\n\n  // Indicates which provider should be used to instrument code for coverage\n  coverageProvider: \"v8\",\n\n  // A list of reporter names that Jest uses when writing coverage reports\n  // coverageReporters: [\n  //   \"json\",\n  //   \"text\",\n  //   \"lcov\",\n  //   \"clover\"\n  // ],\n\n  // An object that configures minimum threshold enforcement for coverage results\n  // coverageThreshold: undefined,\n\n  // A path to a custom dependency extractor\n  // dependencyExtractor: undefined,\n\n  // Make calling deprecated APIs throw helpful error messages\n  // errorOnDeprecated: false,\n\n  // Force coverage collection from ignored files using an array of glob patterns\n  // forceCoverageMatch: [],\n\n  // A path to a module which exports an async function that is triggered once before all test suites\n  globalSetup: \"./test/global-setup.js\",\n\n  // A path to a module which exports an async function that is triggered once after all test suites\n  globalTeardown: \"./test/global-teardown.js\",\n\n  // A set of global variables that need to be available in all test environments\n  // globals: {},\n\n  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n  // maxWorkers: \"50%\",\n\n  // An array of directory names to be searched recursively up from the requiring module's location\n  // moduleDirectories: [\n  //   \"node_modules\"\n  // ],\n\n  // An array of file extensions your modules use\n  // moduleFileExtensions: [\n  //   \"js\",\n  //   \"jsx\",\n  //   \"ts\",\n  //   \"tsx\",\n  //   \"json\",\n  //   \"node\"\n  // ],\n\n  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n  // moduleNameMapper: {},\n\n  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n  // modulePathIgnorePatterns: [],\n\n  // Activates notifications for test results\n  notify: true,\n\n  // An enum that specifies notification mode. Requires { notify: true }\n  notifyMode: \"change\",\n\n  // A preset that is used as a base for Jest's configuration\n  //preset: \"ts-jest\",\n\n  // Run tests from one or more projects\n  // projects: undefined,\n\n  // Use this configuration option to add custom reporters to Jest\n  // reporters: undefined,\n\n  // Automatically reset mock state before every test\n  // resetMocks: false,\n\n  // Reset the module registry before running each individual test\n  // resetModules: false,\n\n  // A path to a custom resolver\n  // resolver: undefined,\n\n  // Automatically restore mock state and implementation before every test\n  // restoreMocks: false,\n\n  // The root directory that Jest should scan for tests and modules within\n  // rootDir: undefined,\n\n  // A list of paths to directories that Jest should use to search for files in\n  // roots: [\n  //   \"<rootDir>\"\n  // ],\n\n  // Allows you to use a custom runner instead of Jest's default test runner\n  // runner: \"jest-runner\",\n\n  // The paths to modules that run some code to configure or set up the testing environment before each test\n  // setupFiles: [],\n\n  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n  // setupFilesAfterEnv: [],\n\n  // The number of seconds after which a test is considered as slow and reported as such in the results.\n  // slowTestThreshold: 5,\n\n  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n  // snapshotSerializers: [],\n\n  // The test environment that will be used for testing\n  testEnvironment: \"node\",\n\n  // Options that will be passed to the testEnvironment\n  // testEnvironmentOptions: {},\n\n  // Adds a location field to test results\n  // testLocationInResults: false,\n\n  // The glob patterns Jest uses to detect test files\n  testMatch: [\"**/*.test.ts\"],\n\n  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n  testPathIgnorePatterns: [\"/node_modules/\"],\n\n  // The regexp pattern or array of patterns that Jest uses to detect test files\n  // testRegex: [],\n\n  // This option allows the use of a custom results processor\n  // testResultsProcessor: undefined,\n\n  // This option allows use of a custom test runner\n  // testRunner: \"jest-circus/runner\",\n\n  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n  // testURL: \"http://localhost\",\n\n  // Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n  // timers: \"real\",\n\n  // A map from regular expressions to paths to transformers\n  transform: { \"^.+\\\\.(t|j)s$\": \"ts-jest\" },\n\n  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n  // transformIgnorePatterns: [\n  //   \"/node_modules/\",\n  //   \"\\\\.pnp\\\\.[^\\\\/]+$\"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n  // unmockedModulePathPatterns: undefined,\n\n  // Indicates whether each individual test should be reported during the run\n  // verbose: undefined,\n\n  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n  // watchPathIgnorePatterns: [],\n\n  // Whether to use watchman for file crawling\n  // watchman: true,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/start.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { initializeWebServer } = require(\"./entry-points/api\");\nconst { MessageQueueStarter } = require(\"./entry-points/message-queue-starter\");\n\nasync function start() {\n  await initializeWebServer();\n  await new MessageQueueStarter().start();\n}\n\nstart()\n  .then(() => {\n    console.log(\"The app has started successfully\");\n  })\n  .catch((error) => {\n    console.log(\"App occured during startup\", error);\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/test/global-setup.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":14,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":22,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":33}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const isPortReachable = require(\"is-port-reachable\");\nconst path = require(\"path\");\nconst dockerCompose = require(\"docker-compose\");\nconst { execSync } = require(\"child_process\");\n\nmodule.exports = async () => {\n  console.time(\"global-setup\");\n\n  // ️️️✅ Best Practice: Speed up during development, if already live then do nothing\n  const isDBReachable = await isPortReachable(54310);\n  if (!isDBReachable) {\n    // ️️️✅ Best Practice: Start the infrastructure within a test hook - No failures occur because the DB is down\n    await dockerCompose.upAll({\n      cwd: path.join(__dirname),\n      log: true,\n    });\n\n    await dockerCompose.exec(\n      \"database\",\n      [\"sh\", \"-c\", \"until pg_isready ; do sleep 1; done\"],\n      {\n        cwd: path.join(__dirname),\n      }\n    );\n\n     // ️️️✅ Best Practice: Use npm script for data seeding and migrations\n    execSync(\"npm run db:migrate\");\n    // ✅ Best Practice: Seed only metadata and not test record, read \"Dealing with data\" section for further information\n    execSync(\"npm run db:seed\");\n  }\n\n  // 👍🏼 We're ready\n  console.timeEnd(\"global-setup\");\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/amiradar/WebstormProjects/practica/src/code-templates/services/order-service/test/global-teardown.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const isCI = require(\"is-ci\");\nconst dockerCompose = require(\"docker-compose\");\nconst OrderRepository = require(\"../data-access/order-repository\").default;\n\nmodule.exports = async () => {\n  if (isCI) {\n    // ️️️✅ Best Practice: Leave the DB up in dev environment\n    dockerCompose.down();\n  } else {\n    // ✅ Best Practice: Clean the database occasionally\n    if (Math.ceil(Math.random() * 10) === 10) {\n      await new OrderRepository().cleanup();\n    }\n  }\n};\n","usedDeprecatedRules":[]}]